#!/bin/bash

# DEMOSTRACI√ìN: Code GPT Ecosystem en Modo Completamente Aut√≥nomo
# Este script muestra c√≥mo el sistema funciona sin intervenci√≥n humana

echo "üöÄ DEMOSTRACI√ìN: Code GPT Ecosystem Aut√≥nomo"
echo "============================================="
echo ""
echo "Este script demostrar√° c√≥mo el ecosistema funciona completamente solo:"
echo "‚Ä¢ Auto-instalaci√≥n y configuraci√≥n"
echo "‚Ä¢ Auto-arranque de componentes"
echo "‚Ä¢ Auto-monitoreo y recuperaci√≥n"
echo "‚Ä¢ Auto-actualizaci√≥n"
echo "‚Ä¢ Dashboard web en tiempo real"
echo ""
echo "üõë Presiona Ctrl+C para detener la demostraci√≥n"
echo ""

# Funci√≥n para mostrar progreso
show_step() {
    echo ""
    echo "üìç PASO $1: $2"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
}

# Funci√≥n para esperar
wait_for_service() {
    local url=$1
    local timeout=$2
    local count=0

    echo "‚è≥ Esperando a que $url responda..."
    while ! curl -s "$url" > /dev/null 2>&1; do
        sleep 1
        count=$((count + 1))
        if [ $count -ge $timeout ]; then
            echo "‚ùå Timeout esperando $url"
            return 1
        fi
    done
    echo "‚úÖ $url est√° respondiendo"
    return 0
}

# Paso 1: Instalaci√≥n aut√≥noma
show_step 1 "Instalaci√≥n completamente autom√°tica"
echo "Ejecutando instalaci√≥n aut√≥noma..."
./install-complete.sh

# Paso 2: Inicio del sistema
show_step 2 "Inicio aut√≥nomo del ecosistema"
echo "Iniciando el ecosistema en modo auto-pilot..."
./quick-start.sh &
ECOSYSTEM_PID=$!

# Paso 3: Verificar que todo est√© funcionando
show_step 3 "Verificaci√≥n autom√°tica de funcionamiento"
echo "Verificando que todos los componentes est√©n funcionando..."

# Esperar a que los servicios est√©n listos
wait_for_service "http://localhost:3000/health" 30
wait_for_service "http://localhost:8080" 30

# Paso 4: Mostrar estado del sistema
show_step 4 "Dashboard y monitoreo en tiempo real"
echo "üåê Dashboard web: http://localhost:8080"
echo "üîå API Gateway: http://localhost:3000"
echo "üì° WebSocket: ws://localhost:8081"
echo ""
echo "El sistema ahora est√° funcionando completamente solo:"
echo "‚Ä¢ ‚úÖ Auto-monitoreo cada 30 segundos"
echo "‚Ä¢ ‚úÖ Auto-recuperaci√≥n de fallos"
echo "‚Ä¢ ‚úÖ Auto-optimizaci√≥n de recursos"
echo "‚Ä¢ ‚úÖ Auto-actualizaciones"
echo "‚Ä¢ ‚úÖ Dashboard web en tiempo real"
echo ""
echo "üìä Comandos para monitorear:"
echo "   ./status-ecosystem.sh    - Ver estado del sistema"
echo "   tail -f logs/*.log       - Ver logs en tiempo real"
echo "   ./backup-ecosystem.sh    - Crear backup manual"
echo ""

# Paso 5: Demostrar auto-recuperaci√≥n
show_step 5 "Demostraci√≥n de auto-recuperaci√≥n"
echo "El sistema se recupera autom√°ticamente de fallos."
echo "Prueba deteniendo un componente y observa c√≥mo se recupera solo."
echo ""
echo "Para detener la demostraci√≥n:"
echo "   ./stop-ecosystem.sh"
echo ""
echo "Para reiniciar:"
echo "   ./restart-ecosystem.sh"
echo ""

# Mantener la demostraci√≥n viva
echo "üéØ DEMOSTRACI√ìN EN CURSO..."
echo "El ecosistema est√° funcionando de manera completamente aut√≥noma."
echo "Abre http://localhost:8080 en tu navegador para ver el dashboard."
echo ""

# Funci√≥n para manejar interrupci√≥n
cleanup() {
    echo ""
    echo "üõë Deteniendo demostraci√≥n..."
    ./stop-ecosystem.sh
    exit 0
}

# Configurar trap para limpieza
trap cleanup INT TERM

# Mantener vivo
while true; do
    sleep 1
    # Verificar que el ecosistema siga funcionando
    if ! kill -0 $ECOSYSTEM_PID 2>/dev/null; then
        echo "‚ùå El proceso del ecosistema se detuvo"
        break
    fi
done

echo "‚úÖ Demostraci√≥n completada"
echo "El ecosistema aut√≥nomo est√° funcionando perfectamente!"